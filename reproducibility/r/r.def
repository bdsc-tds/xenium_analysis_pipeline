BootStrap: docker
From: condaforge/mambaforge:24.7.1-2
Stage: conda

BootStrap: docker
From: mambaorg/micromamba:noble
Stage: mamba

%files from conda
    /opt/conda /pkgs/conda

%post
    cd /opt

# Put conda binaries to the right directory.
    rm -rf conda
    mv /pkgs/conda .
    rm -rf /pkgs

    cd /

BootStrap: docker
From: rocker/r-base:4.4.2
Stage: main

%setup
    mkdir -p ${SINGULARITY_ROOTFS}/opt/_renv/renv

%files from mamba
    /opt/conda /opt
    /usr/local/bin/_*.sh /usr/local/bin
    /bin/micromamba /bin

%files
    metadata/renv.lock /opt/_renv
    metadata/.Rprofile /opt/_renv
    metadata/renv/activate.R /opt/_renv/renv
    metadata/renv/settings.json /opt/_renv/renv

%environment
    export PATH=/opt/conda/bin:/opt/conda/condabin:$PATH
    export MAMBA_ROOT_PREFIX=/opt/conda
    export DEBIAN_FRONTEND=noninteractive
    export TZ="Europe/Zurich"
    export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:/usr/local/lib:$LD_LIBRARY_PATH

%post
# Set up build time environment variables, such as versions
    export LIBARROW_VERSION=18.1.0

# DNS
    # echo "nameserver 8.8.8.8" >> /etc/resolv.conf
    sed -i 's/ch.archive.ubuntu.com/en.archive.ubuntu.com/g' /etc/apt/sources.list.d/debian.sources

# Force ipv4
    echo 'Acquire::ForceIPv4 "true";' | tee /etc/apt/apt.conf.d/99force-ipv4

# Set locale 
    apt-get update
    apt-get install -y locales gnupg-agent
    sed -i '/^#.* en_.*.UTF-8 /s/^#//' /etc/locale.gen
    locale-gen

# Install essential packages
    apt-get install -y --no-install-recommends software-properties-common dirmngr ca-certificates lsb-release

# Configure tzdata to prevent asking for input
    export PATH=/opt/conda/bin:/opt/conda/condabin:$PATH
    export MAMBA_ROOT_PREFIX=/opt/conda
    export DEBIAN_FRONTEND=noninteractive
    export TZ="Europe/Zurich"
    export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:/usr/local/lib:$LD_LIBRARY_PATH

# Install system packages
    apt-get install -y m4 automake autoconf libtool ninja-build git vim cmake wget curl pandoc libssl-dev libcurl4-openssl-dev libmagick++-dev bzip2 libgsl-dev libhdf5-dev libicu-dev

# Install Clang
    apt-get install -y clang-format clang-tidy clang-tools clang clangd libc++-dev libc++1 libc++abi-dev libc++abi1 libclang-dev libclang1 liblldb-dev libllvm-ocaml-dev libomp-dev libomp5 lld lldb llvm-dev llvm-runtime llvm python3-clang

# Install apache arrow from source
    mkdir /pkgs
    cd /pkgs
    git clone --branch apache-arrow-${LIBARROW_VERSION} --single-branch https://github.com/apache/arrow.git
    cd arrow/cpp
    mkdir build
    cd build
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local -DARROW_ACERO="ON" -DARROW_AZURE="ON" -DARROW_BUILD_STATIC="ON" -DARROW_BUILD_UTILITIES="ON" -DARROW_COMPUTE="ON" -DARROW_CSV="ON" -DARROW_DATASET="ON" -DARROW_FILESYSTEM="ON" -DARROW_FLIGHT="ON" -DARROW_FLIGHT_SQL="ON" -DARROW_GANDIVA="ON" -DARROW_GCS="ON" -DARROW_HDFS="ON" -DARROW_JSON="ON" -DARROW_MIMALLOC="ON" -DARROW_ORC="ON" -DARROW_PARQUET="ON" -DARROW_WITH_BROTLI="ON" -DARROW_WITH_BZ2="ON" -DARROW_WITH_LZ4="ON" -DARROW_WITH_RE2="ON" -DARROW_WITH_SNAPPY="ON" -DARROW_WITH_UTF8PROC="ON" -DARROW_WITH_ZLIB="ON" -DARROW_WITH_ZSTD="ON" -DCMAKE_BUILD_TYPE="Release" -DCMAKE_EXPORT_COMPILE_COMMANDS="ON"-DPARQUET_BUILD_EXECUTABLES="ON" -DPARQUET_BUILD_EXECUTABLES="ON" -DPARQUET_REQUIRE_ENCRYPTION="ON"
    cmake --build .
    make install

    apt-get clean

# Install "renv" for R
    R -e "install.packages('renv', repos = c(CRAN = 'https://cloud.r-project.org'))"

# Install R packages with specific versions recorded by "renv"
    R -e "renv::restore(lockfile = '/opt/_renv/renv.lock')"
